[
    {
        "id":2,
        "nom":"Spring with PostgreSQL",
        "syntax":
        {
            "namespace":"package",
            "namespaceStart":";",
            "namespaceEnd":""
        },
        "types":
        {
            "int":"Integer",
            "double":"Double",
            "string":"String",
            "date":"java.time.LocalDate",
            "timestamp":"java.time.LocalDateTime"
        },
        "typeParsers":
        {
            "Integer":"Integer.parseInt([value])",
            "Double":"Double.parseDouble([value])",
            "String":"[value]",
            "java.time.LocalDate":"java.time.LocalDate.parse([value])",
            "java.time.LocalDateTime":"java.time.LocalDateTime.parse([value])"
        },
        "skeleton":"springpsql_skeleton",
        "projectNameTags":
        [
            "[projectNameMaj]/settings.gradle",
            "[projectNameMaj]/src/main/resources/templates/layout/layout.html",
            "[projectNameMaj]/src/main/resources/application.properties"
        ],
        "additionnalFiles":[],
        "model":
        {
            "modelImports":
            [
                "import jakarta.persistence.Entity;",
                "import jakarta.persistence.Column;",
                "import jakarta.persistence.GeneratedValue;",
                "import jakarta.persistence.GenerationType;",
                "import jakarta.persistence.Id;"
            ],
            "modelExtends":"",
            "modelAnnotations":
            [
                "@Entity"
            ],
            "modelPrimaryFieldAnnotations":
            [
                "@Id",
                "@GeneratedValue(strategy=GenerationType.AUTO)"
            ],
            "modelForeignFieldAnnotations":
            [
                "@jakarta.persistence.ManyToOne",
                "@jakarta.persistence.JoinColumn(name=\"[columnName]\")"
            ],
            "modelFieldAnnotations":[],
            "modelFieldCase":"Min",
            "modelFieldContent":"private [fieldType] [columnName];",
            "modelGetter":"public [fieldType] get[fieldNameMaj](){ return [columnName]; }",
            "modelSetter":"public void set[fieldNameMaj]([fieldType] o){ [columnName]=o; }",
            "modelConstructors":[],
            "modelSavePath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/entities",
            "modelAdditionnalFiles":
            [
                {
                    "name":"[classNameMaj]Repository.java",
                    "content":"spring/Repository.templ"
                }
            ],
            "modelExtension":"java",
            "modelPackage":"com.[projectNameMin].entities",
            "modelTemplate":"ModelTemplate"
        },
        "listeArchitecture" : 
        [
            {
                "idArchitecture" : 1,
                "nomArchitecture": "mvc",
                "controller":
                {
                    "controllerImports":
                    [
                        "import org.springframework.beans.factory.annotation.Autowired;",
                        "import org.springframework.stereotype.Controller;",
                        "import org.springframework.ui.Model;",
                        "import org.springframework.web.bind.annotation.GetMapping;",
                        "import org.springframework.web.bind.annotation.PostMapping;",
                        "import org.springframework.web.servlet.view.RedirectView;",
                        "import com.[projectNameMin].entities.[classNameMaj];",
                        "import com.[projectNameMin].entities.[classNameMaj]Repository;"
                    ],
                    "controllerAnnotations":
                    [
                        "@Controller"
                    ],
                    "controllerExtends":"",
                    "controllerName":"[classNameMaj]Controller",
                    "controllerFields":
                    [
                        {
                            "controllerFieldAnnotations":
                            [
                                "@Autowired"
                            ],
                            "controllerFieldContent":"private [classNameMaj]Repository repo;"
                        }
                    ],
                    "controllerFieldsForeign":
                    {
                        "controllerFieldAnnotations":
                        [
                            "@Autowired"
                        ],
                        "controllerFieldContent":"private com.[projectNameMin].entities.[foreignNameMaj]Repository repo[foreignNameMaj];"
                    },
                    "controllerChangeInstanciation":
                    {
                        "template":"o.set[fieldNameMaj]([content]);",
                        "value":"[fieldNameMin]"
                    },
                    "controllerWhereInstanciation":
                    {
                        "template":"where.set[primaryNameMaj]([content]);",
                        "value":"[primaryNameMin]"
                    },
                    "controllerForeignInstanciation":
                    {
                        "template":"o.set[fieldNameMaj](repo[foreignType].findById([content]).orElseThrow());",
                        "value":"[fieldNameMin]"
                    },
                    "controllerForeignList":"model.addAttribute(\"[foreignNameMin]s\", repo[foreignType].findAll());",
                    "controllerForeignContextParam" : "",
                    "controllerForeignContextInstanciation" : "",
                    "controllerConstructors":[],
                    "controllerForeignInclude":"",
                    "controllerMethods":
                    [
                        {
                            "controllerMethodAnnotations":
                            [
                                "@PostMapping(\"/insert[classNameMin].do\")"
                            ],
                            "controllerMethodParameter":"String [fieldNameMin]",
                            "controllerMethodContent":"spring/mvc/controller/springControllerInsert"
                        },
                        {
                            "controllerMethodAnnotations":
                            [
                                "@GetMapping(\"/tocrud[classNameMin].do\")"
                            ],
                            "controllerMethodParameter":"",
                            "controllerMethodContent":"spring/mvc/controller/springControllerRead"
                        },
                        {
                            "controllerMethodAnnotations":
                            [
                                "@PostMapping(\"/update[classNameMin].do\")"
                            ],
                            "controllerMethodParameter":"String [fieldNameMin]",
                            "controllerMethodContent":"spring/mvc/controller/springControllerUpdate"
                        },
                        {
                            "controllerMethodAnnotations":
                            [
                                "@PostMapping(\"/delete[classNameMin].do\")"
                            ],
                            "controllerMethodParameter":"",
                            "controllerMethodContent":"spring/mvc/controller/springControllerDelete"
                        }
                    ],
                    "controllerSavepath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/controllers",
                    "controllerExtension":"java",
                    "controllerPackage":"com.[projectNameMin].controllers",
                    "controllerTemplate":"ControllerTemplate",
                    "controllerNameSuffix":"Controller"
                },
                "view":
                {
                    "viewForeignList":"",
                    "viewTableHeader":"<th scope=\"col\">[fieldNameFormattedMaj]</th>",
                    "foreignFieldGet":".label",
                    "viewTableLine":"<td th:text=\"${e.get[fieldNameMaj]()[foreignFieldGet]}\"></td>",
                    "viewUpdateFormForeignField":"spring/mvc/view/components/springViewUpdateForeign",
                    "viewUpdateFormField":
                    {
                        "Integer":"spring/mvc/view/components/springViewUpdateInt",
                        "Double":"spring/mvc/view/components/springViewUpdateDouble",
                        "String":"spring/mvc/view/components/springViewUpdateString",
                        "java.time.LocalDate":"spring/mvc/view/components/springViewUpdateDate",
                        "java.time.LocalDateTime":"spring/mvc/view/components/springViewUpdateTimestamp"
                    },
                    "viewInsertFormForeignField":"spring/mvc/view/components/springViewInsertForeign",
                    "viewInsertFormField":
                    {
                        "Integer":"spring/mvc/view/components/springViewInsertInt",
                        "Double":"spring/mvc/view/components/springViewInsertDouble",
                        "String":"spring/mvc/view/components/springViewInsertString",
                        "java.time.LocalDate":"spring/mvc/view/components/springViewInsertDate",
                        "java.time.LocalDateTime":"spring/mvc/view/components/springViewInsertTimestamp"
                    },
                    "contentViews" :
                    [
                        {
                            "viewName":"[classNameMin]",
                            "viewContents": "spring/mvc/view/springView"
                        }
                    ],
                    "fetchApiFunction":"",
                    "fetchApiStock":"",
                    "objectInsertForeign":"",
                    "viewSavePath":"[projectNameMaj]/src/main/resources/templates",
                    "viewExtension":"html",
                    "navbarLinks":
                    {
                        "path":"[projectNameMaj]/src/main/resources/templates/layout/layout.html",
                        "link":"<a href=\"/tocrud[classNameMin].do\" class=\"nav-item nav-link\"><i class=\"fa fa-tachometer-alt me-2\"></i>[classNameformattedMaj]</a>",
                        "linkInsert":""
                    }
                }      
            },
            {
                "idArchitecture" : 2,
                "nomArchitecture": "rest api",
                "controller":
                {
                    "controllerImports":
                    [
                        "import org.springframework.beans.factory.annotation.Autowired;",
                        "import org.springframework.web.bind.annotation.RestController;",
                        "import org.springframework.web.bind.annotation.GetMapping;",
                        "import org.springframework.web.bind.annotation.PostMapping;",
                        "import org.springframework.web.bind.annotation.CrossOrigin;",
                        "import com.[projectNameMin].entities.[classNameMaj];",
                        "import com.[projectNameMin].entities.[classNameMaj]Repository;",
                        "import org.springframework.web.bind.annotation.RequestMapping;",
                        "import org.springframework.web.bind.annotation.RequestBody;"
                    ],
                    "controllerAnnotations":
                    [
                        "@RestController",
                        "@RequestMapping(\"/[classNameMin]\")",
                        "@CrossOrigin(\"*\")"
                    ],
                    "controllerExtends":"",
                    "controllerName":"[classNameMaj]Controller",
                    "controllerFields":
                    [
                        {
                            "controllerFieldAnnotations":
                            [
                                "@Autowired"
                            ],
                            "controllerFieldContent":"private [classNameMaj]Repository repo;"
                        }
                    ],
                    "controllerFieldsForeign":
                    {
                        "controllerFieldAnnotations":
                        [
                            "@Autowired"
                        ],
                        "controllerFieldContent":"private com.[projectNameMin].entities.[foreignType]Repository repo[foreignNameMaj];"
                    },
                    "controllerChangeInstanciation":
                    {
                        "template":"o.set[fieldNameMaj]([content]);",
                        "value":"[fieldNameMin]"
                    },
                    "controllerWhereInstanciation":
                    {
                        "template":"where.set[primaryNameMaj]([content]);",
                        "value":"[primaryNameMin]"
                    },
                    "controllerForeignInstanciation":
                    {
                        "template":"o.set[fieldNameMaj](repo[fieldNameMaj].findById([content]).orElseThrow());",
                        "value":"[fieldNameMin]"
                    },
                    "controllerForeignList":"model.addAttribute(\"[foreignNameMin]s\", repo[foreignType].findAll());",
                    "controllerForeignContextParam" : "",
                    "controllerForeignContextInstanciation" : "",
                    "controllerConstructors":[],
                    "controllerForeignInclude":"",
                    "controllerMethods":
                    [
                        {
                            "controllerMethodAnnotations":
                            [
                                "@PostMapping(\"/insert[classNameMaj]\")"
                            ],
                            "controllerMethodParameter":"String [fieldNameMin]",
                            "controllerMethodContent":"spring/rest/controller/springControllerInsert"
                        },
                        {
                            "controllerMethodAnnotations":
                            [
                                "@GetMapping(\"/all[classNameMaj]\")"
                            ],
                            "controllerMethodParameter":"",
                            "controllerMethodContent":"spring/rest/controller/springControllerRead"
                        },
                        {
                            "controllerMethodAnnotations":
                            [
                                "@PostMapping(\"/update[classNameMaj]\")"
                            ],
                            "controllerMethodParameter":"String [fieldNameMin]",
                            "controllerMethodContent":"spring/rest/controller/springControllerUpdate"
                        },
                        {
                            "controllerMethodAnnotations":
                            [
                                "@GetMapping(\"/delete[classNameMaj]ById\")"
                            ],
                            "controllerMethodParameter":"",
                            "controllerMethodContent":"spring/rest/controller/springControllerDelete"
                        }
                    ],
                    "controllerSavepath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/controllers",
                    "controllerExtension":"java",
                    "controllerPackage":"com.[projectNameMin].controllers",
                    "controllerTemplate":"ControllerTemplate",
                    "controllerNameSuffix":"Controller"
                },
                "view":
                {
                    "listeTechnoView": 
                    [
                        {
                            "idTechno" : 1,
                            "nameTechno":"Vue js",
                            "viewForeignList":"",
                            "viewTableHeader":"",
                            "foreignFieldGet":".label",
                            "viewTableLine":"<SpanListe :title-span='[classNameMin].[fieldNameMin][foreignFieldGet]' labels=''/>",
                            "viewUpdateFormForeignField":"spring/rest/view/components/springViewUpdateForeign",
                            "viewUpdateFormField":
                            {
                                "Integer":"spring/rest/view/components/springViewUpdateInt",
                                "Double":"spring/rest/view/components/springViewUpdateDouble",
                                "String":"spring/rest/view/components/springViewUpdateString",
                                "java.time.LocalDate":"spring/rest/view/components/springViewUpdateDate",
                                "java.time.LocalDateTime":"spring/rest/view/components/springViewUpdateTimestamp"
                            },
                            "viewInsertFormForeignField":"spring/rest/view/components/springViewInsertForeign",
                            "viewInsertFormField":
                            {
                                "Integer":"spring/rest/view/components/springViewInsertInt",
                                "Double":"spring/rest/view/components/springViewInsertDouble",
                                "String":"spring/rest/view/components/springViewInsertString",
                                "java.time.LocalDate":"spring/rest/view/components/springViewInsertDate",
                                "java.time.LocalDateTime":"spring/rest/view/components/springViewInsertTimestamp"
                            },
                            "contentViews" :
                            [
                                {
                                    "viewName":"[classNameMaj]",
                                    "viewContents": "spring/rest/view/springView"
                                },
                                {
                                    "viewName":"New[classNameMaj]",
                                    "viewContents": "spring/rest/view/SpringViewInsert"
                                },
                                {
                                    "viewName":"Modif[classNameMaj]",
                                    "viewContents": "spring/rest/view/springViewUpdate"
                                }
                            ],
                            "fetchApiFunction":"spring/rest/view/fetchApiTemplate",
                            "fetchApiStock":"spring/rest/view/variableFetchListe",
                            "objectInsertForeign":"spring/rest/view/objectInsertForeign",
                            "viewSavePath":"[projectFront]/src/components/principal",
                            "viewExtension":"vue",
                            "viewSkeleton": "vue_skeleton"
                        }
                    ],
                    "navbarLinks":
                    {
                        "path":"[projectFront]/src/App.vue",
                        "link":"<li><RouterLink to=\"/all[classNameMaj]\">Liste de [classNameMaj]</RouterLink></li>",
                        "linkInsert":"<li><RouterLink to=\"/new[classNameMaj]\">Insertion de [classNameMin]</RouterLink></li>"
                    },
                    "router":
                    {
                        "path":"[projectFront]/src/router/index.js",
                        "componentImportList" : "import [classNameMaj] from '@/components/principal/[classNameMaj].vue';",
                        "componentImportInsert" : "import New[classNameMaj] from '@/components/principal/New[classNameMaj].vue';",
                        "componentImportUpdate" : "import Modif[classNameMaj] from '@/components/principal/Modif[classNameMaj].vue';",
                        "linkList":"{ path: '/all[classNameMaj]', name: 'all[classNameMaj]', component: [classNameMaj] },",
                        "linkInsert":"{ path: '/new[classNameMaj]', name: 'new[classNameMaj]', component: New[classNameMaj] },",
                        "linkUpdate":"{ path: '/modif[classNameMaj]', name: 'modif[classNameMaj]', component: Modif[classNameMaj] },"
                    }
                }      
            }
        ],
        "customChanges":[]
    }
]